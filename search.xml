<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>学习Docker</title>
      <link href="/2023/04/05/%E5%AD%A6%E4%B9%A0Docker/"/>
      <url>/2023/04/05/%E5%AD%A6%E4%B9%A0Docker/</url>
      
        <content type="html"><![CDATA[<h1 id="docker概念"><a href="#docker概念" class="headerlink" title="docker概念"></a>docker概念</h1><p><strong>一句话概括容器：容器就是将软件打包成标准化单元，以用于开发、交付和部署。</strong></p><ul><li><strong>容器镜像是轻量的、可执行的独立软件包</strong> ，包含软件运行所需的所有内容：代码、运行时环境、系统工具、系统库和设置。</li><li><strong>容器化软件适用于基于 Linux 和 Windows 的应用，在任何环境中都能够始终如一地运行。</strong></li><li><strong>容器赋予了软件独立性</strong>，使其免受外在环境差异（例如，开发和预演环境的差异）的影响，从而有助于减少团队间在相同基础设施上运行不同软件时的冲突。</li></ul><p>容器虚拟化的是操作系统而不是硬件，容器之间是共享同一套操作系统资源的。虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统。因此容器的隔离级别会稍低一些。</p><p><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-7/container.png"></p><h2 id="docker-思想："><a href="#docker-思想：" class="headerlink" title="docker 思想："></a>docker 思想：</h2><ul><li><strong>集装箱</strong></li><li><strong>标准化</strong>：① 运输方式 ② 存储方式 ③ API 接口</li><li><strong>隔离</strong></li></ul><h2 id="为什么要用docker"><a href="#为什么要用docker" class="headerlink" title="为什么要用docker"></a>为什么要用docker</h2><ul><li><p><strong>Docker 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 “这段代码在我机器上没问题啊” 这类问题；——一致的运行环境</strong></p></li><li><p><strong>可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。——更快速的启动时间</strong></p></li><li><p><strong>避免公用的服务器，资源会容易受到其他用户的影响。——隔离性</strong></p></li><li><p><strong>善于处理集中爆发的服务器使用压力；——弹性伸缩，快速扩展</strong></p></li><li><p><strong>可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。——迁移方便</strong></p></li><li><p><strong>使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。——持续交付和部署</strong></p></li></ul><h1 id="docker基本概念"><a href="#docker基本概念" class="headerlink" title="docker基本概念"></a>docker基本概念</h1><h2 id="镜像：-一个特殊的文件系统"><a href="#镜像：-一个特殊的文件系统" class="headerlink" title="镜像： 一个特殊的文件系统"></a>镜像： 一个特殊的文件系统</h2><p><strong>操作系统分为内核和用户空间</strong>。对于 Linux 而言，内核启动后，会挂载 root 文件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个 root 文件系统。</p><p><strong>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。</strong> 镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p><p>Docker 设计时，就充分利用 <strong>Union FS</strong> 的技术，将其设计为<strong>分层存储的架构</strong> 。镜像实际是由多层文件系统联合组成。</p><p><strong>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。</strong> 比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p><p>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</p><h2 id="容器：-镜像运行时的实体"><a href="#容器：-镜像运行时的实体" class="headerlink" title="容器： 镜像运行时的实体"></a>容器： 镜像运行时的实体</h2><p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，<strong>容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等</strong> 。</p><p><strong>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。前面讲过镜像使用的是分层存储，容器也是如此。</strong></p><p><strong>容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</strong></p><p>按照 Docker 最佳实践的要求，<strong>容器不应该向其存储层内写入任何数据</strong> ，容器存储层要保持无状态化。<strong>所有的文件写入操作，都应该使用数据卷（Volume）、或者绑定宿主目录</strong>，在这些位置的读写会跳过容器存储层，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此， <strong>使用数据卷后，容器可以随意删除、重新 run ，数据却不会丢失。</strong></p><h2 id="仓库-集中存放镜像文件的地方"><a href="#仓库-集中存放镜像文件的地方" class="headerlink" title="仓库: 集中存放镜像文件的地方"></a>仓库: 集中存放镜像文件的地方</h2><p>镜像构建完成后，可以很容易的在当前宿主上运行，但是， <strong>如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。</strong></p><p>一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。所以说：<strong>镜像仓库是 Docker 用来集中存放镜像文件的地方类似于我们之前常用的代码仓库。</strong></p><p>通常，<strong>一个仓库会包含同一个软件不同版本的镜像</strong>，而<strong>标签就常用于对应该软件的各个版本</strong> 。我们可以通过<code>&lt;仓库名&gt;:&lt;标签&gt;</code>的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签.。</p><p><strong>这里补充一下 Docker Registry 公开服务和私有 Docker Registry 的概念：</strong></p><p><strong>Docker Registry 公开服务</strong> 是开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。</p><h1 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h1><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker version <span class="comment"># 查看docker版本</span></span><br><span class="line">docker images <span class="comment"># 查看所有已下载镜像，等价于：docker image ls 命令</span></span><br><span class="line">docker container <span class="built_in">ls</span> <span class="comment">#查看所有容器</span></span><br><span class="line">docker ps <span class="comment">#查看正在运行的容器</span></span><br><span class="line">docker image prune <span class="comment"># 清理临时的、没有被使用的镜像文件。-a, --all: 删除所有没有用的镜像，而不仅仅是临时文件；</span></span><br></pre></td></tr></table></figure><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql <span class="comment"># 查看mysql相关镜像</span></span><br><span class="line">docker pull mysql:5.7 <span class="comment"># 拉取mysql镜像</span></span><br><span class="line">docker image <span class="built_in">ls</span> <span class="comment"># 查看所有已下载镜像</span></span><br></pre></td></tr></table></figure><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><p>通过 <code>docker rmi [image]</code>（等价于<code>docker image rm [image]</code>）删除镜像之前首先要确保这个镜像没有被容器引用（可以通过标签名称或者镜像 ID删除）。通过我们前面讲的<code>docker ps</code>命令即可查看。</p><p>当镜像被容器引用时，首先需要通过<code>docker stop id</code>或者<code>docker stop 镜像名</code>暂停这个容器。</p><p>然后查看镜像的id： <code>docker images</code></p><p>最后通过IMAGE ID或者镜像名字就可以删除： <code>docker rmi id</code></p><h2 id="docker-容器指令"><a href="#docker-容器指令" class="headerlink" title="docker 容器指令"></a>docker 容器指令</h2><ul><li><p>通过镜像运行一个容器： <code>docker run run tomcat:8.0-jre8</code></p><p>通过该方式运行的 tomcat 是不能直接被外部访问的，因为容器具有隔离性，若是想直接通过 8080 端口访问容器内部的 tomcat，则需要对宿主机端口与容器内的端口进行映射：</p><p><code>docker run -p 8080:8080 tomcat:8.0-jre8</code></p><p>解释一下这两个端口的作用(<code>8080:8080</code>)，第一个 8080 为宿主机端口，第二个 8080 为容器内的端口，外部访问 8080 端口就会通过映射访问容器内的 8080 端口。</p><p>容器还能够以后台的方式运行，这样就不会占用终端：</p><p><code>docker run -d -p 8080:8080 tomcat:8.0-jre8</code></p><p>启动容器时默认会给容器一个名称，但这个名称其实是可以设置的，使用指令：</p><p><code>docker run -d -p 8080:8080 --name tomcat01 tomcat:8.0-jre8</code></p><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>-a</td><td>参数会将运行和非运行的容器全部列举出来</td></tr><tr><td>-q</td><td>只查询正在运行的容器 id</td></tr><tr><td>-aq</td><td>查询运行和非运行的所有容器</td></tr></tbody></table></li><li><p>容器启动： <code>docker start 容器id</code></p></li><li><p>让已经停止运行的容器运行： <code>docker restart 容器id/名称</code></p></li><li><p>重启容器： <code>docker stop 容器id/名称</code></p></li><li><p>停止容器： <code>docker kill 容器id/名称</code></p></li><li><p>查看容器运行日志： <code>docker logs 容器id/名称</code>  </p><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>-f</td><td>实时显示日志信息</td></tr><tr><td>-t</td><td>显示日志的时间戳</td></tr></tbody></table></li><li><p>查看容器运行了哪些进程： <code>docker top 容器id/名称</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习Linux</title>
      <link href="/2023/04/04/%E5%AD%A6%E4%B9%A0Linux/"/>
      <url>/2023/04/04/%E5%AD%A6%E4%B9%A0Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="linux简单介绍"><a href="#linux简单介绍" class="headerlink" title="linux简单介绍"></a>linux简单介绍</h1><p>linux是一个开源、免费的<font color="red">操作系统</font>，其稳定性、安全性、处理多并发得到业界认可。</p><p>linux的特点</p><ul><li>免费、开源的</li><li>支持多线程、多用户</li><li>安全性好</li><li>堆内存和文件管理优越</li></ul><span id="more"></span><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><table><thead><tr><th>常用快捷键</th><th>功能</th></tr></thead><tbody><tr><td>ctrl + c</td><td>停止进程</td></tr><tr><td>ctrl + l</td><td>清屏；彻底清屏是：reset</td></tr><tr><td>ctrl + q</td><td>退出</td></tr><tr><td>善于用tab键</td><td>提示(更重要的是可以防止敲错)</td></tr><tr><td>上下键</td><td>查找执行过的命令</td></tr><tr><td>ctrl + alt</td><td>linux和Windows之间切换</td></tr></tbody></table><h2 id="文件目录类"><a href="#文件目录类" class="headerlink" title="文件目录类"></a>文件目录类</h2><ul><li><p><em><strong>pwd</strong></em> 显示当前工作目录的绝对路径</p></li><li><p><em><strong>ls</strong></em> 列出目录的内容</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-a</td><td>全部的文件，连同隐藏档( 开头为 . 的文件) 一起列出来(常用)</td></tr><tr><td>-l</td><td>长数据串列出，包含文件的属性与权限等等数据；(常用)等价于“ll”</td></tr></tbody></table></li><li><p><em><strong>cd</strong></em> 切换目录</p><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>cd 绝对路径</td><td>切换路径</td></tr><tr><td>cd 相对路径</td><td>切换路径</td></tr><tr><td>cd ~或者cd</td><td>回到自己的家目录</td></tr><tr><td>cd -</td><td>回到上一次所在目录</td></tr><tr><td>cd ..</td><td>回到当前目录的上一级目录</td></tr><tr><td>cd -P</td><td>跳转到实际物理路径，而非快捷方式路径</td></tr></tbody></table></li><li><p><em><strong>mkdir</strong></em> 创建一个新目录</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-p</td><td>创建多层目录</td></tr></tbody></table></li><li><p><em><strong>rmdir</strong></em> 删除一个空的目录</p></li><li><p><em><strong>touch</strong></em> 创建空文件</p></li><li><p><em><strong>cp</strong></em> 复制文件或目录</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-r</td><td>递归复制整个文件夹</td></tr></tbody></table><p>案例：<code>cp -r xiyou/dssz/ ./</code></p></li><li><p><em><strong>rm</strong></em> 删除文件或目录</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-r</td><td>递归删除目录中所有内容</td></tr><tr><td>-f</td><td>强制执行删除操作，而不提示用于进行确认。</td></tr><tr><td>-v</td><td>显示指令的详细执行过程</td></tr></tbody></table><p>删除目录中的内容： <code>rm xiyou/mingjie/test.txt</code></p><p>递归删除目录中的所有内容： <code>rm -rf xiyou/</code></p></li><li><p><em><strong>mv</strong></em> 移动文件与目录或重命名</p><p>重命名： <code>mv test/test.txt test/test1.txt</code></p><p>移动文件： <code>mv test/test.txt ./</code></p></li><li><p><em><strong>cat</strong></em> 查看文件内容</p><table><thead><tr><th>选项</th><th>功能描述</th></tr></thead><tbody><tr><td>-n</td><td>显示所有行的行号，包括空行。</td></tr></tbody></table></li><li><p><em><strong>more</strong></em> 文件内容分屏查看器</p><table><thead><tr><th>操作</th><th>功能说明</th></tr></thead><tbody><tr><td>空白键 (space)</td><td>代表向下翻一页；</td></tr><tr><td>Enter</td><td>代表向下翻『一行』；</td></tr><tr><td>q</td><td>代表立刻离开 more ，不再显示该文件内容。</td></tr><tr><td>Ctrl+F</td><td>向下滚动一屏</td></tr><tr><td>Ctrl+B</td><td>返回上一屏</td></tr><tr><td>=</td><td>输出当前行的行号</td></tr><tr><td>:f</td><td>输出文件名和当前行的行号</td></tr></tbody></table></li><li><p><em><strong>echo</strong></em> 输出内容到控制台</p><p>-e：  支持反斜线控制的字符转换</p><table><thead><tr><th>控制字符</th><th>作用</th></tr></thead><tbody><tr><td>\</td><td>输出\本身</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\t</td><td>制表符，也就是Tab键</td></tr></tbody></table><p>案例： <code>echo &quot;hello\tworld&quot;       -&gt;         hello\tworld</code></p><p>​            <code>echo -e &quot;hello\tworld&quot;       -&gt;         hello     world</code></p></li><li><p><em><strong>head</strong></em> 显示文件头部内容</p><p>案例： <code>head -n 2 test.txt</code>   显示文件的头2行</p></li><li><p><em><strong>tail</strong></em> 输出文件尾部内容</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-n&lt;行数&gt;</td><td>输出文件尾部n行内容</td></tr><tr><td>-f</td><td>显示文件最新追加的内容，监视文件变化</td></tr></tbody></table><p>查看文件尾1行内容： <code>tail -n 1 test.txt</code></p><p>实时追踪该文档的所有更新： <code>tail -f test.txt</code></p></li><li><p><em><strong>&gt;</strong></em> 输出重定向和 ***&gt;&gt;***追加</p><p>将<em><strong>ls</strong></em>查看信息写入到文件中： <code>ls -l &gt; test.txt</code></p><p>将<em><strong>ls</strong></em>查看信息追加到文件中： <code>ls -l &gt;&gt; test.txt</code></p><p>将文件1的内容覆盖到文件2： <code>cat 1.txt &gt; 2.txt</code></p><p>采用<em><strong>echo</strong></em>将hello单词追加到文件中： <code>echo hello &gt;&gt; test.txt</code></p></li><li><p><em><strong>ln</strong></em> 软链接，主要存放了链接其他文件的路径</p><p>删除软链接： <code>rm -rf 软链接名</code>，而不是<code>rm -rf 软链接名/</code></p><p>如果使用 <code>rm -rf 软链接名/</code>  删除，会把软链接对应的真实目录下内容删掉</p></li><li><p><em><strong>history</strong></em> 查看已经执行过的历史命令</p></li></ul><h2 id="时间日期类"><a href="#时间日期类" class="headerlink" title="时间日期类"></a>时间日期类</h2><ul><li><p><em><strong>date</strong></em> 显示当前时间</p><p>显示当前时间年月日： <code>date +%Y%m%d</code></p><p>显示当前时间年月日时分秒： <code>date +%Y%m%d %H:%M:%S</code></p><p>显示前一天： <code>date -d &#39;1 days ago&#39;</code></p><p>显示明天时间： <code>date -d &#39;-1 days ago&#39;</code></p><p>设置系统当前时间： <code>date -s &quot;2017-06-19 20:52:18&quot;</code></p></li><li><p><em><strong>cal</strong></em> 查看当前月日历</p><p>查看2023年的日历： <code>cal 2023</code></p></li></ul><h2 id="用户管理命令"><a href="#用户管理命令" class="headerlink" title="用户管理命令"></a>用户管理命令</h2><ul><li><p><em><strong>useradd</strong></em> 添加新用户</p><p>案例： <code>useradd test</code></p></li><li><p><em><strong>passwd</strong></em> 设置用户密码</p><p>案例： <code>passwd test</code></p></li><li><p><em><strong>id</strong></em> 查看用户是否存在</p><p>案例： <code>id test</code></p></li><li><p><em><strong>cat /etc/passwd</strong></em> 查看创建了哪些用户</p></li><li><p><em><strong>su</strong></em> 切换用户</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>su 用户名称</td><td>切换用户，只能获得用户的执行权限，不能获得环境变量</td></tr><tr><td>su - 用户名称</td><td>切换到用户并获得该用户的环境变量及执行权限</td></tr></tbody></table></li><li><p><em><strong>userdel</strong></em> 删除用户</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-r</td><td>删除用户的同时，删除与用户相关的所有文件。</td></tr></tbody></table></li><li><p><em><strong>who</strong></em> 查看登录用户信息</p><p>显示自身用户名称： <code>whoami</code></p><p>显示登陆用户的用户名： <code>who am i</code></p></li><li><p><em><strong>sudo</strong></em> 设置普通用户具有root权限</p><p>案例： <code>sudo mkdir module</code></p></li><li><p><em><strong>usermod</strong></em> 修改用户</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-g</td><td>修改用户的初始登录组，给定的组必须存在。默认组id是1。</td></tr></tbody></table><p>案例： <code>usermod -g root test  usermod -g 用户组 用户名</code></p></li></ul><h2 id="用户组管理命令"><a href="#用户组管理命令" class="headerlink" title="用户组管理命令"></a>用户组管理命令</h2><ul><li><p><em><strong>groupadd</strong></em> 新增组</p><p>案例： <code>groupadd test</code></p></li><li><p><em><strong>groupdel</strong></em> 删除组</p><p>案例： <code>groupdel test</code></p></li><li><p><em><strong>groupmod</strong></em> 修改组</p><p>案例： <code>groupmod -n test test1</code></p></li><li><p><em><strong>cat /etc/group</strong></em> 查看创建了哪些组</p></li></ul><h2 id="文件权限类"><a href="#文件权限类" class="headerlink" title="文件权限类"></a>文件权限类</h2><ul><li><strong>从左到右的10个字符表示，如下图所示：</strong></li></ul><p><img src="/2023/04/04/%E5%AD%A6%E4%B9%A0Linux/pic1.png" alt="1680675595556"></p><p>如果没有权限，就会出现减号[ - ]而已。从左至右用0-9这些数字来表示:</p><ol><li><p>0首位表示类型</p><p>在Linux中第一个字符代表这个文件是目录、文件或链接文件等等</p><p>- 代表文件</p><p> d 代表目录</p><p> l 链接文档(link file)；</p></li><li><p>第1-3位确定属主（该文件的所有者）拥有该文件的权限。—User</p></li><li><p>第4-6位确定属组（所有者的同组用户）拥有该文件的权限，—Group</p></li><li><p>第7-9位确定其他用户拥有该文件的权限 —Other</p></li></ol><ul><li><strong>rxw作用文件和目录的不同解释</strong></li></ul><ol><li><p>作用到文件：</p><p>[ r ] 代表可读(read): 可以读取，查看</p><p>[ w ] 代表可写(write): 可以修改，但是不代表可以删除该文件，删除一个文件的前提条件是对该文件所在的目录有写权限，才能删除该文件.</p><p>[ x ] 代表可执行(execute):可以被系统执行</p></li><li><p>作用到目录：</p><p>[ r ] 代表可读(read): 可以读取，ls查看目录内容</p><p>[ w ] 代表可写(write): 可以修改，目录内创建+删除+重命名目录</p><p>[ x ] 代表可执行(execute):可以进入该目录</p></li></ol><ul><li><strong>文件属性基本介绍，如下图所示</strong></li></ul><p><img src="/2023/04/04/%E5%AD%A6%E4%B9%A0Linux/pic2.png"></p><ol><li>如果查看到是文件：链接数指的是硬链接个数。</li><li>如果查看的是文件夹：链接数指的是子文件夹个数。</li></ol><ul><li><p><em><strong>chmod</strong></em> 改变权限</p><p><img src="/2023/04/04/%E5%AD%A6%E4%B9%A0Linux/pic3.png"></p><p>u:所有者  g:所有组  o:其他人  a:所有人(u、g、o的总和)</p><p>r=4     w=2     x=1                  rwx=4+2+1=7</p><p>修改文件使其所属主用户具有执行权限： <code>chmod u+x test.txt</code></p><p>修改文件使其所属组用户具有执行权限： <code>chmod g+x test.txt</code></p><p>修改文件所属主用户执行权限,并使其他用户具有执行权限： <code>chmod u-x, o+x test.txt</code></p><p>数字的方式，设置文件所有者、所属组、其他用户都具有可读可写可执行权限： <code>chmod 777 test.txt</code></p><p>修改整个文件夹里面的所有文件的所有者、所属组、其他用户都具有可读可写可执行权限。</p><p><code>chmod -R 777 test/</code></p></li><li><p><em><strong>chown</strong></em> 改变所有者</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-R</td><td>递归操作</td></tr></tbody></table><p>案例： <code>chown test test.txt    chown [选项] [最终用户] [文件或目录] </code></p></li><li><p><em><strong>chgrp</strong></em> 改变所属组</p><p>案例： <code>chgrp test test.txt    chgrp [最终用户组] [文件或目录]</code></p></li></ul><h2 id="搜索查找类"><a href="#搜索查找类" class="headerlink" title="搜索查找类"></a>搜索查找类</h2><ul><li><p><em><strong>find</strong></em> 查找目录或文件</p><table><thead><tr><th align="left">选项</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">-name&lt;查询方式&gt;</td><td align="left">按照指定的文件名查找模式查找文件</td></tr><tr><td align="left">-user&lt;用户名&gt;</td><td align="left">查找属于指定用户名所有文件</td></tr><tr><td align="left">-size&lt;文件大小&gt;</td><td align="left">按照指定的文件大小查找文件,单位为:    <strong>b</strong> —— 块（512字节）   <strong>c</strong> —— 字节   <strong>w</strong> —— 字（2字节）   <strong>k</strong> —— 千字节   <strong>M</strong> —— 兆字节   <strong>G</strong> —— 吉字节</td></tr></tbody></table><p>按文件名查找： <code>find test/ -name *.txt</code></p><p>按拥有者查找： <code>find test/ -user test</code></p><p>按文件大小查找： <code>find /home -szie +204800        +n 大于  -n小于   n等于</code></p></li><li><p><em><strong>locate</strong></em> 快速定位文件路径</p></li><li><p><em><strong>grep</strong></em> 过滤查找及“|”管道符</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-n</td><td>显示匹配行及行号。</td></tr></tbody></table><p>查找某文件在第几行： <code>ls | grep -n test</code></p></li></ul><h2 id="压缩和解压缩类"><a href="#压缩和解压缩类" class="headerlink" title="压缩和解压缩类"></a>压缩和解压缩类</h2><ul><li><p><em><strong>gzip/gunzip</strong></em> 压缩</p><p><code>gzip test.txt      压缩文件，只能将文件压缩为*.gz文件</code></p><p><code>gunzip test.txt.gz     解压缩文件命令</code></p></li><li><p><em><strong>zip/unzip</strong></em> 压缩</p><table><thead><tr><th>zip选项</th><th>功能</th></tr></thead><tbody><tr><td>-r</td><td>压缩目录</td></tr></tbody></table><table><thead><tr><th>unzip选项</th><th>功能</th></tr></thead><tbody><tr><td>-d&lt;目录&gt;</td><td>指定解压后文件的存放目录</td></tr></tbody></table><p>压缩 test.txt和test1.txt，压缩后的名称为mypackage.zip： <code>zip mypackage.zip test.txt test1.txt</code></p><p>解压mypackage.zip到指定目录： <code>unzip mypackage.zip -d /opt</code></p></li><li><p><em><strong>tar</strong></em> 打包</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-c</td><td>产生.tar打包文件</td></tr><tr><td>-v</td><td>显示详细信息</td></tr><tr><td>-f</td><td>指定压缩后的文件名</td></tr><tr><td>-z</td><td>打包同时压缩</td></tr><tr><td>-x</td><td>解包.tar文件</td></tr><tr><td>-C</td><td>解压到指定目录</td></tr></tbody></table><p>压缩多个文件： <code>tar -zcvf test.tar.gz test1.txt test2.txt</code></p><p>压缩目录： <code>tar -zcvf test.tar.gz test/</code></p><p>解压到当前目录： <code>tar -zxvf test.tar.gz</code></p><p>解压到指定目录： <code>tar -zxvf test.tar.gz -C /opt</code></p></li></ul><h2 id="磁盘分区类"><a href="#磁盘分区类" class="headerlink" title="磁盘分区类"></a>磁盘分区类</h2><ul><li><p><em><strong>df</strong></em> 查看磁盘空间使用情况</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-h</td><td>以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</td></tr></tbody></table></li><li><p><em><strong>fdisk</strong></em> 查看分区。必须在root用户下才能使用</p></li><li><p><em><strong>Isblk</strong></em> 查看设备挂载情况</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-f</td><td>查看详细的设备挂载情况，显示文件系统信息</td></tr></tbody></table></li><li><p><em><strong>mount/umount</strong></em> 挂载/卸载</p></li></ul><h2 id="进程线程类"><a href="#进程线程类" class="headerlink" title="进程线程类"></a>进程线程类</h2><ul><li><p><em><strong>ps</strong></em> 查看当前系统进程状态</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-a</td><td>选择所有进程</td></tr><tr><td>-u</td><td>显示所有用户的所有进程</td></tr><tr><td>-x</td><td>显示没有终端的进程</td></tr></tbody></table><p>查看系统中所有进程： <code>ps -aux | grep xxx</code></p><p>查看父子进程之间的关系： <code>ps -ef | grep xxx</code></p></li><li><p><em><strong>kill</strong></em> 终止进程</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-9</td><td>表示强迫进程立即停止</td></tr></tbody></table></li><li><p><em><strong>pstree</strong></em> 查看进程树</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-p</td><td>显示进程的PID</td></tr><tr><td>-u</td><td>显示进程的所属用户</td></tr></tbody></table><p>显示进程pid： <code>pstree -p</code></p><p>显示进程所属用户： <code>pstree -u</code></p></li><li><p><em><strong>top</strong></em> 查看系统健康状态</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-d 秒数</td><td>指定top命令每隔几秒更新。默认是3秒在top命令的交互模式当中可以执行的命令：</td></tr><tr><td>-i</td><td>使top不显示任何闲置或者僵死进程。</td></tr><tr><td>-p</td><td>通过指定监控进程ID来仅仅监控某个进程的状态。</td></tr></tbody></table></li><li><p><em><strong>netstat</strong></em> 显示网络统计信息和端口占用情况</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-n</td><td>拒绝显示别名，能显示数字的全部转化成数字</td></tr><tr><td>-l</td><td>仅列出有在listen（监听）的服务状态</td></tr><tr><td>-p</td><td>表示显示哪个进程在调用</td></tr></tbody></table><p>查看该进程网络信息： <code>netstat -anp | grep 进程号</code></p><p>查看网络端口号占用情况： <code>netstat -nlp | grep 端口号</code></p></li></ul><h2 id="RPM查询命令"><a href="#RPM查询命令" class="headerlink" title="RPM查询命令"></a>RPM查询命令</h2><ul><li><p><em><strong>rpm -qa</strong></em> 查询所安装的所有rpm软件包</p></li><li><p><em><strong>rpm -e</strong></em> 卸载软件包</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-e</td><td>卸载软件包</td></tr><tr><td>–nodeps</td><td>卸载软件时，不检查依赖。这样的话，那些使用该软件包的软件在此之后可能就不能正常工作了。</td></tr></tbody></table></li><li><p><em><strong>rpm -ivh</strong></em> 安装软件包</p></li></ul><h2 id="YUM仓库类"><a href="#YUM仓库类" class="headerlink" title="YUM仓库类"></a>YUM仓库类</h2><ul><li><p><em><strong>yum</strong></em> 安装软件</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-y</td><td>对所有提问都回答“yes”</td></tr></tbody></table><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>install</td><td>安装rpm软件包</td></tr><tr><td>update</td><td>更新rpm软件包</td></tr><tr><td>check-update</td><td>检查是否有可用的更新rpm软件包</td></tr><tr><td>remove</td><td>删除指定的rpm软件包</td></tr><tr><td>list</td><td>显示软件包信息</td></tr><tr><td>clean</td><td>清理yum过期的缓存</td></tr><tr><td>deplist</td><td>显示yum软件包的所有依赖关系</td></tr></tbody></table><p>采用yum方式安装firefox： <code>yum -y install firefox.x86_64</code></p></li></ul><h2 id="网络配置和系统管理操作"><a href="#网络配置和系统管理操作" class="headerlink" title="网络配置和系统管理操作"></a>网络配置和系统管理操作</h2><ul><li><p><em><strong>ifconfig</strong></em> 配置网络接口，显示当前网络ip</p></li><li><p><em><strong>ping</strong></em> 测试主机之间网络连通性</p></li><li><p><strong>修改IP地址</strong></p><ol><li>查看IP配置文件： <code>vim /etc/sysconfig/network-scripts/ifcfg-ens33</code></li><li>重启网络： <code>service network restart</code></li></ol></li><li><p><strong>配置主机名</strong></p><ol><li>查看当前服务器主机名称： <code>hostname</code></li><li>修改主机名： <code>vi /etc/hostname</code></li></ol></li><li><p><strong>修改hosts映射文件</strong></p><ol><li>打开/etc/hosts： <code>vim /etc/hosts</code></li></ol></li><li><p><strong>关闭防火墙</strong></p><ol><li><p><em><strong>service</strong></em> ： <code>service  服务名 start | stop | restart | status  </code> <strong>（CentOS 6）</strong></p><p>查看网络服务的状态： <code>service network status</code></p><p>停止网络服务： <code>service network stop</code></p><p>启动网络服务： <code>service network start</code></p><p>重启网络服务： <code>service network restart</code></p></li><li><p><em><strong>chkconfig</strong></em> 设置后台服务的自动启动<strong>（CentOS 6）</strong></p></li><li><p><em><strong>systemctl</strong></em> ： <code>systemctl  start | stop | restart | status  服务名</code></p><p>查看防火墙服务的状态： <code>systemctl status firewalld</code></p><p>查看服务开机启动状态： <code>systemctl list-unit-files</code></p><p>开启iptables(防火墙)服务的自动启动： <code>systemctl enable firewalld.service</code></p><p>关闭iptables(防火墙)服务的自动启动： <code>systemctl disable firewalld.service</code></p></li></ol></li></ul><h2 id="关机命令"><a href="#关机命令" class="headerlink" title="关机命令"></a>关机命令</h2><ul><li><p>立即关机</p><p><code>shutdown -h now</code></p></li><li><p>现在重新启动计算机</p><p><code>shutdown -r now</code></p><p><code>reboot</code></p></li></ul><h2 id="Linux查看内存、磁盘存储、io-读写、端口占用、进程等命令"><a href="#Linux查看内存、磁盘存储、io-读写、端口占用、进程等命令" class="headerlink" title="Linux查看内存、磁盘存储、io 读写、端口占用、进程等命令"></a>Linux查看内存、磁盘存储、io <strong>读写</strong>、端口占用、进程等命令</h2><ol><li><p>查看内存：top</p></li><li><p>查看磁盘存储情况：df -h</p></li><li><p>查 看磁盘IO读写情况：iotop（需要安装一下：yum install iotop）、iotop -o（直接查看输出比较高的磁盘读写程序）</p></li><li><p>查看端口占用情况：netstat -tunlp | grep 端口号</p></li><li><p>查看进程：ps -aux</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习markdown</title>
      <link href="/2023/04/03/%E5%AD%A6%E4%B9%A0markdown/"/>
      <url>/2023/04/03/%E5%AD%A6%E4%B9%A0markdown/</url>
      
        <content type="html"><![CDATA[<p><em>这里是文字</em><br><em>这里是文字</em><br><strong>这里是文字</strong><br><em><strong>这里是文字</strong></em><br><del>这里是文字</del></p><span id="more"></span><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><h3 id="标题-1"><a href="#标题-1" class="headerlink" title="标题"></a>标题</h3><h4 id="标题-2"><a href="#标题-2" class="headerlink" title="标题"></a>标题</h4><p><img src="/2023/04/03/%E5%AD%A6%E4%B9%A0markdown/1.jpg" alt="test"></p><img src="/2023/04/03/%E5%AD%A6%E4%B9%A0markdown/1.jpg" width="26%" height="26%"><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/03/29/hello-world/"/>
      <url>/2023/03/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
